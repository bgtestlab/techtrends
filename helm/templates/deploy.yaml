apiVersion: apps/v1
kind: Deployment
## Set the parameters that make the object identifiable, such as its name, namespace, and labels.
metadata:
  creationTimestamp: null
  labels:
    app: techtrends
  name: techtrends
  namespace: {{ .Values.namespace.name }}
spec:
  ## Set the number of replicas.
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: techtrends
  strategy:
    rollingUpdate:
      maxSurge: {{ .Values.strategy.rollingUpdate.maxSurge }}
      maxUnavailable: {{ .Values.strategy.rollingUpdate.maxUnavailable }}
    type: {{ .Values.strategy.type }}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: techtrends
    spec:
      containers:
      - image: {{ .Values.image.repository }}:{{ .Values.image.tag }} 
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        name: techtrends
        ## Expose the port the container is listening on.
        ports:
        - containerPort: {{ .Values.containerPort }}
          protocol: {{ .Values.service.protocol }}
        ## Define the rules for the liveness probes.
        livenessProbe:
           httpGet:
             path: {{ .Values.livenessProbe.httpGet.path }}
             port: {{ .Values.livenessProbe.httpGet.port }}
        ## Define the rules for the readiness probes.
        readinessProbe:
           httpGet:
             path: {{ .Values.readinessProbe.httpGet.path }}
             port: {{ .Values.readinessProbe.httpGet.port }}
        resources:
        ## The resource requests guarantees that the desired amount
        ## CPU and memory is allocated for a pod. 
          requests:
            memory: {{ .Values.resources.requests.memory }} 
            cpu: {{ .Values.resources.requests.cpu }}
        ## The resource limits ensure that the application is not consuming
        ## more than the specified CPU and memory values.
          limits:
            memory: {{ .Values.resources.limits.memory }}
            cpu: {{ .Values.resources.limits.cpu }}

status: {}

